/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#version 450 core

layout(UPDATE_FREQ_PER_DRAW, binding = 0, rgba8) uniform image2D Source;
layout(UPDATE_FREQ_PER_DRAW, binding = 1, rgba8) uniform image2D Destination;

layout(push_constant) uniform RootConstant_Block
{
	uvec2 MipSize;
} RootConstant;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{    
	uvec3 id = gl_GlobalInvocationID;
	if (id.x < RootConstant.MipSize.x && id.y < RootConstant.MipSize.y)
	{
		vec3 color = vec3(0.0f);
		for (int x = 0; x < 2; ++x)
		{
			for (int y = 0; y < 2; ++y)
				color += imageLoad(Source, ivec2(id.xy) * 2 + ivec2(x, y)).rgb;
		}
		imageStore(Destination, ivec2(id.xy), vec4(color * 0.25f, 1.0f));
	}
}
